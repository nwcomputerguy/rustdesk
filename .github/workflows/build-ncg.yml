name: Build NCG Remote Access

on:
  push:
    branches: [ main, master, ncg-1.4 ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.75.0"
  CARGO_TERM_COLOR: always
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C target-feature=+crt-static"
  VCPKG_ROOT: "C:\\vcpkg"

jobs:
  build-windows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup vcpkg cache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc
        components: rustfmt
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1-rust"
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Install NASM
      uses: ilammy/setup-nasm@v1
    
    - name: Install LLVM
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "16.0"
        directory: ${{ runner.temp }}/llvm
    
    - name: Install vcpkg dependencies
      shell: cmd
      run: |
        cd C:\
        git clone --depth=1 https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        bootstrap-vcpkg.bat
        vcpkg.exe integrate install
        vcpkg.exe install --triplet x64-windows-static libvpx libyuv opus aom
        echo === Checking opus installation ===
        dir C:\vcpkg\installed\x64-windows-static\include\opus\
        echo === Listing all opus headers ===
        dir /s /b C:\vcpkg\installed\x64-windows-static\include\opus\*.h
        echo === Checking if opus_multistream.h exists ===
        if exist "C:\vcpkg\installed\x64-windows-static\include\opus\opus_multistream.h" (
            echo Found opus_multistream.h
        ) else (
            echo WARNING: opus_multistream.h not found!
        )
    
    - name: Set build environment and fix opus
      shell: powershell
      run: |
        echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIBCLANG_PATH=${{ runner.temp }}\llvm\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Set multiple include paths for bindgen
        $includeArgs = "-IC:\vcpkg\installed\x64-windows-static\include -IC:\vcpkg\installed\x64-windows-static\include\opus"
        echo "BINDGEN_EXTRA_CLANG_ARGS=$includeArgs" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Also set environment variables for the opus build
        echo "OPUS_INCLUDE_DIR=C:\vcpkg\installed\x64-windows-static\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPUS_LIB_DIR=C:\vcpkg\installed\x64-windows-static\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Create pkg-config file
        $pkgConfigPath = "C:\vcpkg\installed\x64-windows-static\lib\pkgconfig"
        New-Item -ItemType Directory -Force -Path $pkgConfigPath
        
        $opusLines = @(
            "prefix=C:/vcpkg/installed/x64-windows-static",
            "exec_prefix=`${prefix}",
            "libdir=`${exec_prefix}/lib",
            "includedir=`${prefix}/include",
            "",
            "Name: Opus",
            "Description: Opus codec",
            "Version: 1.4",
            "Libs: -L`${libdir} -lopus",
            "Cflags: -I`${includedir} -I`${includedir}/opus"
        )
        $opusLines -join "`n" | Out-File -FilePath "$pkgConfigPath\opus.pc" -Encoding UTF8
        
        echo "PKG_CONFIG_PATH=$pkgConfigPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Check if we need to create a symlink or copy headers
        $opusInclude = "C:\vcpkg\installed\x64-windows-static\include\opus"
        if (Test-Path "$opusInclude\opus.h") {
            Write-Host "Opus headers are in opus subdirectory"
            # Check if opus_multistream.h is missing
            if (-not (Test-Path "$opusInclude\opus_multistream.h")) {
                Write-Host "WARNING: opus_multistream.h is missing from the opus installation!"
                # Try to find it elsewhere
                $foundFiles = Get-ChildItem -Path "C:\vcpkg" -Filter "opus_multistream.h" -Recurse -ErrorAction SilentlyContinue
                if ($foundFiles) {
                    Write-Host "Found opus_multistream.h at: $($foundFiles[0].FullName)"
                }
            }
        }
    
    - name: Customize for NCG
      shell: powershell
      run: |
        # Update Cargo.toml with NCG branding
        $cargo = Get-Content Cargo.toml -Raw
        $cargo = $cargo -replace 'ProductName = "RustDesk"', 'ProductName = "NCG Remote Access"'
        $cargo = $cargo -replace 'FileDescription = "RustDesk Remote Desktop"', 'FileDescription = "NCG Remote Access Tool"'
        $cargo | Set-Content Cargo.toml
        
        # Create custom server config
        New-Item -ItemType Directory -Force -Path "src"
        $configLines = @(
            'pub const CUSTOM_RENDEZVOUS_SERVER: &str = "rust.northwoodscomputerguy.com:21116";',
            'pub const RELAY_SERVER: &str = "rust.northwoodscomputerguy.com:21117";',
            'pub const PUBLIC_KEY: &str = "sjVK2P8Cik7MW4v6sn1FhCN5RdRAK1BpqXlSDraF0qY=";'
        )
        $configLines -join "`n" | Out-File -FilePath "src/ncg_config.rs" -Encoding UTF8
    
    - name: Build RustDesk - Minimal (no audio)
      shell: cmd
      run: |
        set VCPKG_ROOT=C:\vcpkg
        set LIBCLANG_PATH=${{ runner.temp }}/llvm/bin
        echo === Starting minimal build without audio ===
        cargo build --release --no-default-features --features "use_rubato use_dasp" --verbose
    
    - name: Build RustDesk - With Audio (if minimal succeeds)
      if: success()
      continue-on-error: true
      shell: cmd
      run: |
        set VCPKG_ROOT=C:\vcpkg
        set LIBCLANG_PATH=${{ runner.temp }}/llvm/bin
        set BINDGEN_EXTRA_CLANG_ARGS=-IC:\vcpkg\installed\x64-windows-static\include -IC:\vcpkg\installed\x64-windows-static\include\opus
        set OPUS_INCLUDE_DIR=C:\vcpkg\installed\x64-windows-static\include
        set OPUS_LIB_DIR=C:\vcpkg\installed\x64-windows-static\lib
        echo === Attempting full build with audio ===
        cargo build --release --verbose
    
    - name: Package NCG Remote
      if: success()
      shell: powershell
      run: |
        $output = "NCG-Remote-Portable"
        New-Item -ItemType Directory -Force -Path $output
        
        if (Test-Path "target\release\rustdesk.exe") {
            Copy-Item "target\release\rustdesk.exe" "$output\NCG-Remote-Access.exe"
            Write-Host "Copied main executable"
            
            # Check file size to determine if audio is included
            $fileSize = (Get-Item "$output\NCG-Remote-Access.exe").Length / 1MB
            $buildType = if ($fileSize -gt 20) { "Full (with audio)" } else { "Minimal (no audio)" }
            Write-Host "Build type: $buildType (Size: $([math]::Round($fileSize, 2)) MB)"
        } else {
            Write-Host "ERROR: rustdesk.exe not found!"
            exit 1
        }
        
        # Create config file
        $configLines = @(
            "rendezvous_server = 'rust.northwoodscomputerguy.com:21116'",
            "nat_type = 1",
            "serial = 0",
            "",
            "[options]",
            "custom-rendezvous-server = 'rust.northwoodscomputerguy.com:21116'",
            "key = 'sjVK2P8Cik7MW4v6sn1FhCN5RdRAK1BpqXlSDraF0qY='",
            "relay-server = 'rust.northwoodscomputerguy.com:21117'",
            "api-server = ''"
        )
        $configLines -join "`n" | Out-File -FilePath "$output\RustDesk2.toml" -Encoding UTF8
        
        # Create batch file
        $batchLines = @(
            "@echo off",
            "title NCG Remote Access",
            "color 0A",
            "echo =======================================",
            "echo    NCG Remote Access Tool",
            "echo    Version 1.4.0 Custom Build",
            "echo =======================================",
            "echo.",
            "echo Starting NCG Remote Access...",
            "echo.",
            'start "" "NCG-Remote-Access.exe"',
            "echo.",
            "echo Your ID will appear in the main window.",
            "echo Share this ID with NCG support when requested.",
            "echo.",
            "echo Server: rust.northwoodscomputerguy.com",
            "echo Support: https://northwoodscomputerguy.com",
            "echo.",
            "echo Press any key to close this window...",
            "pause >nul"
        )
        $batchLines -join "`r`n" | Out-File -FilePath "$output\Start-NCG-Remote.bat" -Encoding ASCII
        
        # Create README
        $readmeContent = "NCG Remote Access Tool`r`n"
        $readmeContent += "======================`r`n"
        $readmeContent += "Version: 1.4.0 Custom Build`r`n"
        $readmeContent += "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm')`r`n"
        $readmeContent += "Build Type: $buildType`r`n`r`n"
        $readmeContent += "QUICK START:`r`n"
        $readmeContent += "1. Double-click Start-NCG-Remote.bat`r`n"
        $readmeContent += "2. Share your ID with NCG support`r`n`r`n"
        $readmeContent += "FEATURES:`r`n"
        $readmeContent += "- Custom NCG server configuration`r`n"
        $readmeContent += "- No installation required`r`n"
        $readmeContent += "- Based on RustDesk 1.4.0`r`n"
        if ($buildType -eq "Minimal (no audio)") {
            $readmeContent += "- Note: Audio features disabled in this build`r`n"
        }
        $readmeContent += "`r`nSERVER:`r`n"
        $readmeContent += "rust.northwoodscomputerguy.com`r`n`r`n"
        $readmeContent += "SUPPORT:`r`n"
        $readmeContent += "https://northwoodscomputerguy.com`r`n"
        $readmeContent | Out-File -FilePath "$output\README.txt" -Encoding UTF8
        
        # Create version info
        $versionInfo = @{
            Version = "1.4.0"
            BuildNumber = "${{ github.run_number }}"
            BuildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            GitCommit = "${{ github.sha }}"
            Server = "rust.northwoodscomputerguy.com"
            BuildType = $buildType
        }
        $versionInfo | ConvertTo-Json | Out-File -FilePath "$output\version.json" -Encoding UTF8
        
        Get-ChildItem $output
        
        Compress-Archive -Path "$output\*" -DestinationPath "NCG-Remote-Portable.zip" -Force
        Write-Host "Created NCG-Remote-Portable.zip"
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NCG-Remote-${{ github.run_number }}
        path: |
          NCG-Remote-Portable.zip
          NCG-Remote-Portable/
    
    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v1.4.0-ncg.${{ github.run_number }}
        name: NCG Remote Access v1.4.0 Build ${{ github.run_number }}
        body: |
          # NCG Remote Access Tool
          
          Download: **NCG-Remote-Portable.zip**
          
          ## Quick Start
          1. Download and extract NCG-Remote-Portable.zip
          2. Double-click Start-NCG-Remote.bat
          3. Share your ID with NCG support
          
          ## Features
          - Custom NCG server configuration
          - Based on RustDesk 1.4.0
          - Portable - no installation required
          
          Server: rust.northwoodscomputerguy.com
          
          Build ${{ github.run_number }} | Commit: ${{ github.sha }}
        files: NCG-Remote-Portable.zip
        draft: false
        prerelease: false
