name: Build NCG Remote Access

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.75.0"
  CARGO_TERM_COLOR: always
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C target-feature=+crt-static"

jobs:
  build-windows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup vcpkg cache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc
        components: rustfmt
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1-rust"
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Install NASM
      uses: ilammy/setup-nasm@v1
    
    - name: Install vcpkg dependencies
      shell: cmd
      run: |
        cd C:\
        git clone --depth=1 https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        bootstrap-vcpkg.bat
        vcpkg.exe integrate install
        vcpkg.exe install --triplet x64-windows-static libvpx libyuv opus aom
    
    - name: Check Sciter files
      shell: powershell
      run: |
        # Check if Sciter files exist
        if (Test-Path "target/debug/api.include") {
            Write-Host "Sciter files already exist"
        } else {
            Write-Host "Downloading Sciter SDK..."
            # Create directories
            New-Item -ItemType Directory -Force -Path "target/debug"
            
            # Download Sciter SDK
            $sciterUrl = "https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"
            Invoke-WebRequest -Uri $sciterUrl -OutFile "target/debug/sciter.dll"
        }
    
    - name: Customize for NCG
      shell: powershell
      run: |
        # Update Cargo.toml with NCG branding
        $cargo = Get-Content Cargo.toml -Raw
        $cargo = $cargo -replace 'ProductName = "RustDesk"', 'ProductName = "NCG Remote Access"'
        $cargo = $cargo -replace 'FileDescription = "RustDesk Remote Desktop"', 'FileDescription = "NCG Remote Access Tool"'
        $cargo | Set-Content Cargo.toml
        
        # Create custom server config
        @'
        pub const CUSTOM_RENDEZVOUS_SERVER: &str = "rust.northwoodscomputerguy.com:21116";
        pub const RELAY_SERVER: &str = "rust.northwoodscomputerguy.com:21117";
        pub const PUBLIC_KEY: &str = "sjVK2P8Cik7MW4v6sn1FhCN5RdRAK1BpqXlSDraF0qY=";
        '@ | Out-File -FilePath "src/ncg_config.rs" -Encoding UTF8
        
        # Update build configuration
        if (Test-Path "build.rs") {
            $buildContent = Get-Content "build.rs" -Raw
            # Add NCG config to the build
            $ncgConfig = @"
        
        // NCG Custom Configuration
        println!("cargo:rustc-env=RENDEZVOUS_SERVER=rust.northwoodscomputerguy.com:21116");
        println!("cargo:rustc-env=RS_PUB_KEY=sjVK2P8Cik7MW4v6sn1FhCN5RdRAK1BpqXlSDraF0qY=");
        "@
            $buildContent = $buildContent + $ncgConfig
            $buildContent | Set-Content "build.rs"
        }
    
    - name: Generate Sciter bindings
      shell: cmd
      run: |
        echo Skipping inline-sciter for now...
        REM cd res
        REM python inline-sciter.py
        REM cd ..
    
    - name: Build RustDesk
      shell: cmd
      run: |
        set VCPKG_ROOT=C:\vcpkg
        echo Building without inline feature...
        cargo build --release --verbose 2>&1 || (
          echo Build failed with inline feature, trying without...
          cargo build --release --verbose
        )
    
    - name: Package NCG Remote
      shell: powershell
      run: |
        # Create output directory
        $output = "NCG-Remote-Portable"
        New-Item -ItemType Directory -Force -Path $output
        
        # Copy main executable
        if (Test-Path "target\release\rustdesk.exe") {
            Copy-Item "target\release\rustdesk.exe" "$output\NCG-Remote-Access.exe"
            Write-Host "Copied main executable"
        } else {
            Write-Host "ERROR: rustdesk.exe not found!"
            exit 1
        }
        
        # Create config file with NCG server
        @"
        rendezvous_server = 'rust.northwoodscomputerguy.com:21116'
        nat_type = 1
        serial = 0
        
        [options]
        custom-rendezvous-server = 'rust.northwoodscomputerguy.com:21116'
        key = 'sjVK2P8Cik7MW4v6sn1FhCN5RdRAK1BpqXlSDraF0qY='
        relay-server = 'rust.northwoodscomputerguy.com:21117'
        api-server = ''
        "@ | Out-File -FilePath "$output\RustDesk2.toml" -Encoding UTF8
        
        # Create startup batch file
        @"
        @echo off
        title NCG Remote Access
        echo =======================================
        echo    NCG Remote Access Tool
        echo =======================================
        echo.
        echo Starting NCG Remote Access...
        echo.
        start "" "NCG-Remote-Access.exe"
        echo Your ID will appear in the main window.
        echo Share this ID with NCG support when requested.
        echo.
        echo Support: https://northwoodscomputerguy.com
        echo.
        timeout /t 5
        "@ | Out-File -FilePath "$output\Start-NCG-Remote.bat" -Encoding ASCII
        
        # Create README
        @"
        NCG Remote Access Tool
        ======================
        Version: 1.4.0
        Build Date: $(Get-Date -Format "yyyy-MM-dd")
        
        QUICK START:
        ------------
        1. Double-click "Start-NCG-Remote.bat" or "NCG-Remote-Access.exe"
        2. Your ID will be displayed in the main window
        3. Share this ID with NCG support when requested
        
        FEATURES:
        ---------
        - Connects to NCG's private server for security
        - No installation required (portable)
        - Automatic configuration
        
        TROUBLESHOOTING:
        ----------------
        If the program doesn't start:
        1. Make sure Windows Defender isn't blocking it
        2. Try right-click > "Run as Administrator"
        3. Contact support at https://northwoodscomputerguy.com
        
        SUPPORT:
        --------
        Website: https://northwoodscomputerguy.com
        
        This tool is configured to connect exclusively to NCG's
        secure server infrastructure.
        "@ | Out-File -FilePath "$output\README.txt" -Encoding UTF8
        
        # Create version info
        @{
            Version = "1.4.0"
            BuildNumber = "${{ github.run_number }}"
            BuildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            GitCommit = "${{ github.sha }}"
            Server = "rust.northwoodscomputerguy.com"
        } | ConvertTo-Json | Out-File -FilePath "$output\version.json" -Encoding UTF8
        
        # Zip the portable version
        Compress-Archive -Path "$output\*" -DestinationPath "NCG-Remote-Portable.zip" -Force
        
        Write-Host "Package created successfully!"
        Get-ChildItem $output
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NCG-Remote-${{ github.run_number }}
        path: |
          NCG-Remote-Portable.zip
          NCG-Remote-Portable/
    
    - name: Create Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v1.4.0.${{ github.run_number }}
        name: NCG Remote Access v1.4.0.${{ github.run_number }}
        body: |
          # NCG Remote Access Tool
          
          ## ðŸ“¥ Download
          **[NCG-Remote-Portable.zip]** - Ready to use, no installation needed!
          
          ## ðŸš€ Quick Start
          1. Download and extract `NCG-Remote-Portable.zip`
          2. Double-click `Start-NCG-Remote.bat`
          3. Share your ID with NCG support when requested
          
          ## âœ¨ Features
          - Based on RustDesk 1.4.0
          - Pre-configured for NCG's secure server
          - Portable - no installation required
          - Windows 7, 8, 10, and 11 compatible
          
          ## ðŸ”’ Security
          This build connects exclusively to NCG's private server infrastructure.
          
          ## ðŸ“ž Support
          Visit: https://northwoodscomputerguy.com
          
          ---
          Build #${{ github.run_number }} | Commit: ${{ github.sha }}
        files: NCG-Remote-Portable.zip
        draft: false
        prerelease: false
