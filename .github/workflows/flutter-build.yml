name: Build the flutter version of the RustDesk

env:
  CARGO_NDK_VERSION: "3.1.2"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.19.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.75.3"
  # vcpkg version: 2024.07.12
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_TAG: "2024.07.12"
  VERSION: "1.4.0"
  NDK_VERSION: "r26d"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  HBB: '${{ secrets.HBB }}'
  HSK: '${{ secrets.HSK }}'

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

jobs:
  build-rustdesk-linux:
    name: build rustdesk linux ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04, arch: x86_64 }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-20.04, arch: aarch64 }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Free Up GitHub Actions Ubuntu Runner Disk Space ðŸ”§
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: "1.75"
          targets: ${{ matrix.job.target }}
          components: 'rustfmt'

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}
          key: ${{ matrix.job.target }}-b

      - name: Install flutter rust bridge deps
        run: |
          dart pub global activate ffigen 5.0.1
          # Use version that's compatible with Rust 1.75
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid"
          pushd flutter && flutter pub get && popd

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_TAG }}

      - name: Install vcpkg dependencies
        run: |
          case ${{ matrix.job.arch }} in
            x86_64)
              $VCPKG_ROOT/vcpkg \
                install \
                --binarysource="clear;x-gha,readwrite" \
                --x-install-root="$VCPKG_ROOT/installed"
              ;;
            aarch64)
              $VCPKG_ROOT/vcpkg \
                install \
                --binarysource="clear;x-gha,readwrite" \
                --x-install-root="$VCPKG_ROOT/installed" \
                --triplet=arm64-linux
              ;;
          esac

      - name: Install llvm
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          case ${{ matrix.job.arch }} in
            x86_64)
              sudo apt-get install -y \
                build-essential \
                clang \
                cmake \
                curl \
                gcc \
                git \
                g++ \
                libayatana-appindicator3-dev \
                libasound2-dev \
                libclang-dev \
                libgstreamer1.0-dev \
                libgstreamer-plugins-base1.0-dev \
                libgtk-3-dev \
                libpam0g-dev \
                libpulse-dev \
                libva-dev \
                libvdpau-dev \
                libxcb-randr0-dev \
                libxcb-shape0-dev \
                libxcb-xfixes0-dev \
                libxdo-dev \
                libxfixes-dev \
                llvm-dev \
                nasm \
                ninja-build \
                pkg-config \
                tree \
                wget
              ;;
            aarch64)
              sudo apt-get install -y \
                build-essential \
                crossbuild-essential-arm64 \
                clang \
                cmake \
                curl \
                gcc \
                git \
                g++ \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libayatana-appindicator3-dev:arm64 \
                libasound2-dev:arm64 \
                libclang-dev \
                libgstreamer1.0-dev:arm64 \
                libgstreamer-plugins-base1.0-dev:arm64 \
                libgtk-3-dev:arm64 \
                libpam0g-dev:arm64 \
                libpulse-dev:arm64 \
                libva-dev:arm64 \
                libvdpau-dev:arm64 \
                libxcb-randr0-dev:arm64 \
                libxcb-shape0-dev:arm64 \
                libxcb-xfixes0-dev:arm64 \
                libxdo-dev:arm64 \
                libxfixes-dev:arm64 \
                llvm-dev \
                nasm \
                ninja-build \
                pkg-config \
                tree \
                wget
              # some package names are different for arm64
              sudo apt-get install -y \
                libappindicator3-dev:arm64
              ;;
          esac

      - name: Build rustdesk
        run: |
          case ${{ matrix.job.arch }} in
            x86_64)
              export DEFAULT_FEAT=""
              ;;
            aarch64)
              export DEFAULT_FEAT="--no-default-features --features flutter,unix-file-copy-paste"
              export CC_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-g++
              export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
              export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_LIBDIR
              export VCPKG_TARGET_TRIPLET=arm64-linux
              ;;
          esac
          echo $DEFAULT_FEAT
          cargo build --features flutter --release --target ${{ matrix.job.target }} $DEFAULT_FEAT

      - name: Build linux deb package
        run: |
          case ${{ matrix.job.arch }} in
            x86_64)
              export DEFAULT_FEAT=""
              ;;
            aarch64)
              export DEFAULT_FEAT="--no-default-features --features flutter,unix-file-copy-paste"
              ;;
          esac
          pushd res && python3 build_deb.py --target ${{ matrix.job.target }} $DEFAULT_FEAT && popd

      - name: Rename rustdesk
        run: |
          for name in rustdesk*??.deb; do
              # use cp to duplicate deb files to avoid renaming issue
              cp "$name" "${name%%.deb}-${{ matrix.job.arch }}.deb"
          done

      - name: Upload Artifacts
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb
          path: |
            rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb

  build-rustdesk-macos:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: aarch64-apple-darwin, os: macos-14, arch: aarch64 }
          - { target: x86_64-apple-darwin, os: macos-13, arch: x86_64 }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: "1.75"
          targets: ${{ matrix.job.target }}
          components: 'rustfmt'

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}
          key: ${{ matrix.job.target }}-b

      - name: Install flutter rust bridge deps
        run: |
          dart pub global activate ffigen 5.0.1
          # Use version that's compatible with Rust 1.75
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid"
          pushd flutter && flutter pub get && popd

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_TAG }}

      - name: Install vcpkg dependencies
        run: |
          case ${{ matrix.job.arch }} in
            x86_64)
              $VCPKG_ROOT/vcpkg \
                install \
                --binarysource="clear;x-gha,readwrite" \
                --x-install-root="$VCPKG_ROOT/installed"
              ;;
            aarch64)
              $VCPKG_ROOT/vcpkg \
                install \
                --binarysource="clear;x-gha,readwrite" \
                --x-install-root="$VCPKG_ROOT/installed" \
                --triplet=arm64-osx
              ;;
          esac

      - name: Install llvm
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install dependencies
        run: |
          brew install \
            cmake \
            wget \
            ninja

      - name: Build rustdesk
        run: |
          case ${{ matrix.job.arch }} in
            x86_64)
              export DEFAULT_FEAT=""
              ;;
            aarch64)
              export DEFAULT_FEAT=""
              export VCPKG_TARGET_TRIPLET=arm64-osx
              ;;
          esac
          echo $DEFAULT_FEAT
          cargo build --features flutter --release --target ${{ matrix.job.target }} $DEFAULT_FEAT

      - name: Create rustdesk.dmg
        run: |
          pushd flutter && flutter build macos --release && popd
          codesign --force --options runtime -s - ./flutter/build/macos/Build/Products/Release/RustDesk.app/Contents/MacOS/RustDesk
          create-dmg --icon "RustDesk.app" 200 190 --hide-extension "RustDesk.app" --window-size 800 400 --app-drop-link 600 185 rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.dmg ./flutter/build/macos/Build/Products/Release/RustDesk.app

      - name: Upload Artifacts
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-macos-${{ matrix.job.arch }}
          path: |
            rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.dmg

  build-rustdesk-windows:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: i686-pc-windows-msvc, os: windows-2022, arch: x86 }
          - { target: x86_64-pc-windows-msvc, os: windows-2022, arch: x86_64 }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: "1.75"
          targets: ${{ matrix.job.target }}
          components: 'rustfmt'

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}
          key: ${{ matrix.job.target }}-b

      - name: Install flutter rust bridge deps
        run: |
          dart pub global activate ffigen 5.0.1
          # Use version that's compatible with Rust 1.75
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid"
          Push-Location flutter ; flutter pub get ; Pop-Location

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_TAG }}

      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --binarysource="clear;x-gha,readwrite" \
            --x-install-root="$VCPKG_ROOT/installed" \
            --triplet=${{ matrix.job.arch }}-windows-static ; then
            find $VCPKG_ROOT/buildtrees -name "*.log" | xargs cat
            exit 1
          fi
        shell: bash

      - name: Install llvm
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install nasm
        uses: ilammy/setup-nasm@v1

      - name: Build rustdesk
        run: |
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7z2201-x64.msi" -OutFile "7z.msi"
          Start-Process msiexec.exe -ArgumentList '/i', '7z.msi', '/quiet', '/norestart' -NoNewWindow -Wait
          # extract upx
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.0.2/upx-4.0.2-win64.zip" -OutFile "upx.zip"
          Expand-Archive upx.zip
          $env:PATH += ";$(pwd)\upx\upx-4.0.2-win64"
          
          # build rustdesk
          $env:VCPKG_TARGET_TRIPLET="${{ matrix.job.arch }}-windows-static"
          cargo build --features flutter,hwcodec,vram --release --target ${{ matrix.job.target }}

      - name: Build windows ui
        run: |
          cd flutter
          flutter build windows --release
          $pwd = pwd
          cd build/windows/x64/runner/Release
          Remove-Item -Path msvcr110.dll,msvcp110.dll,vcruntime140.dll,msvcp140.dll,vcruntime140_1.dll -ErrorAction SilentlyContinue

      - name: Find Runner.res
        run: |
          $runner_res=$(Get-ChildItem -Path . -Name "Runner.res" -Recurse)
          Write-Host "Runner.res: $runner_res"
          foreach($file in $runner_res)
          {
              echo "list $file"
              ls -l $file
          }

      - name: Download and build topmostwindow using cargo
        run: |
          git clone https://github.com/21pages/topmost_window
          cd topmost_window && cargo build --release --target ${{ matrix.job.target }}
          cd ..

      - name: Upload topmostwindow artifacts
        uses: actions/upload-artifact@master
        with:
          name: topmostwindow-artifacts
          path: |
            topmost_window/target/${{ matrix.job.target }}/release/topmost_window.exe

      - name: Upload rustdesk binary
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-windows-${{ matrix.job.arch }}
          path: |
            flutter/build/windows/x64/runner/Release

      - name: Portable
        run: |
          $ErrorActionPreference = "Continue"
          mkdir rustdesk
          cd flutter/build/windows/x64/runner/Release
          Get-ChildItem -File | % { Copy-Item $_.FullName "../../../../../../rustdesk/" }
          cd ../../../../../../
          mkdir rustdesk/drivers
          cp -r res/msi/Package/drivers/RustDeskPrinterDriver rustdesk/drivers/
          cd libs/portable
          pip3 install -r requirements.txt
          python3 ./pack.py ../../rustdesk/ ../../rustdesk.exe

      - name: Remove dpi awareness on portable for x86 only
        if: matrix.job.arch == 'x86'
        run: |
          sed -i '/dpiAware/d' res/manifest.xml

      - name: Build portable
        shell: bash
        run: |
          pushd libs/portable
          pip3 install -r requirements.txt
          python3 ./pack.py ../../rustdesk/ ../../rustdesk.exe
          popd

      - name: Download topmostwindow artifacts
        uses: actions/download-artifact@master
        with:
          name: topmostwindow-artifacts
          path: ./rustdesk

      - name: Upload portable rustdesk
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-windows-${{ matrix.job.arch }}.zip
          path: |
            rustdesk.exe

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build msi
        run: |
          pushd ./res/msi
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform=x64 /p:TargetVersion="${{ env.VERSION }}"
          popd

      - name: Install rcedit for Icon Embedding
        shell: powershell
        run: |
          Write-Host "Installing rcedit for custom icon embedding..."
          $rceditUrl = "https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe"
          Invoke-WebRequest -Uri $rceditUrl -OutFile "rcedit.exe"
          Write-Host "rcedit installed successfully"

      - name: Add NCG Icon to RustDesk EXE
        shell: powershell
        run: |
          Write-Host "Adding NCG custom icon to RustDesk executable..."
          if (Test-Path "rustdesk\rustdesk.exe") {
            Write-Host "Adding icon to rustdesk\rustdesk.exe"
            .\rcedit.exe "rustdesk\rustdesk.exe" --set-icon "icons\ncg-logo.ico"
            Write-Host "Icon successfully added to rustdesk.exe"
          }
          
          if (Test-Path "rustdesk.exe") {
            Write-Host "Adding icon to rustdesk.exe"
            .\rcedit.exe "rustdesk.exe" --set-icon "icons\ncg-logo.ico"
          }

      - name: Create NCG Branded Portable EXE
        shell: powershell
        run: |
          Write-Host "Creating NCG branded portable EXE..."
          
          # The portable packer should have already created a complete single EXE
          # We just need to copy it and rename with NCG branding
          $portableFile = Get-ChildItem -Path "libs\portable" -Name "rustdesk*.exe" | Select-Object -First 1
          if ($portableFile) {
            Copy-Item "libs\portable\$portableFile" "SignOutput\rustdesk-${{ env.VERSION }}-ncg-portable.exe"
            
            # Add NCG icon to the portable EXE
            .\rcedit.exe "SignOutput\rustdesk-${{ env.VERSION }}-ncg-portable.exe" --set-icon "icons\ncg-logo.ico"
            
            Write-Host "Created NCG portable EXE with embedded icon: rustdesk-${{ env.VERSION }}-ncg-portable.exe"
          } else {
            Write-Host "ERROR: Could not find portable EXE file in libs\portable"
            Get-ChildItem -Path "libs\portable" -Recurse
          }

      - name: Rename MSI for NCG Branding
        shell: powershell
        run: |
          Write-Host "Renaming MSI with NCG branding..."
          $msiFiles = Get-ChildItem -Path "SignOutput" -Name "*.msi"
          foreach ($msi in $msiFiles) {
            $newName = $msi -replace "rustdesk-(.+)\.msi", "rustdesk-`$1-ncg-installer.msi"
            if ($newName -ne $msi) {
              Rename-Item -Path "SignOutput\$msi" -NewName $newName
              Write-Host "Renamed MSI to: $newName"
            }
          }

      - name: Publish NCG Branded Files
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: nightly
          files: |
            ./SignOutput/rustdesk-*-ncg-installer.msi
            ./SignOutput/rustdesk-*-ncg-portable.exe